
import time
import logging
import random
import time
a= 12

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ContentType, message, InlineKeyboardButton, InlineKeyboardMarkup


bot = Bot(token='5704015463:AAGcBZcmrg94gwHEb6knQGBhoyKD_24PIrM')
dp = Dispatcher(bot=bot)
phrases = ['–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä üëç',
           '–î—É–º–∞—é, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä ‚òùÔ∏è',
           '–•–º–º, –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üòé',
           '–°—Ç—Ä–∞–Ω–æ...ü§î',
           '–í–ø–æ–ª–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å üßê',
           '–†–µ—à–∞—Ç—å —Ç–µ–±–µ, –Ω–æ –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è —ç—Ç–æ —É–∂–µ –ø–µ—Ä–µ–±–æ—Ä üòÆ‚Äçüí®',
           '–≠—Ç–æ —Å–º–µ—à–Ω–æ üòÇ',
           '–≠—Ç–æ –ø–µ—á–∞–ª—å–Ω–æ üò≠',
           '–ß–µ–≥–æ —á–µ–≥–æ??? ü§®',
           '–í—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ üòá',
           '–¥–∞ —Ç—ã –∫–∞–∫ –≤ –≤–æ–¥—É —Å–º–æ—Ç—Ä–∏—à—å üòß',
           '–º–¥—ç—ç—ç ü§¨',
           '–ú–æ–∂–µ—Ç –≤—Å–µ —Ç–∞–∫–∏ –µ—â–µ —Ä–∞–∑ –ø–æ–¥–±—Ä–æ—Å–∏—à—å –º–æ–Ω–µ—Ç–∫—É? üòë',
           '–û–ú–ê–ì–ê–î üò≥',
           '–¢–∞–∫–æ–≥–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å... ü§™',
           '–ù—É —á—Ç–æ –∑–∞ –∫–ª–æ—É–Ω–∞–¥–∞ ü§°',
           '–¢–æ —Ç–æ –∂–µ ‚òùÔ∏è',
           '–ù—É —ç—Ç–æ –≤–∑—Ä—ã–≤ –º–æ–∑–≥–∞ ü§Ø',
           'üí©üí©üí©üí©üí©üí©üí©',
           '–≠—Ç–æ –≤—Å—ë –∏–∑-–∑–∞ —Ç–µ–±—è... ü´µ',
           '–ö–∞–∫ —ç—Ç–æ —Ä–∞–∑–≤–∏–¥–µ—Ç—å? üôà']
coin = ['–û—Ä—ë–ª "–î–∞"', '–†–µ—à–∫–∞ "–ù–µ—Ç"']
with open('statistics_monetka.txt', 'r') as f:
    counter = int(f.read())

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    user_name = message.from_user.first_name
    logging.info(f'{user_id=} {user_full_name=} {time.asctime()}')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞—é –º–æ–Ω–µ—Ç–∫—É ü™ô')
    markup.add(item1)
    await bot.send_message(user_id, 'ü™ô')
    await bot.send_message(user_id, f'\n–ü—Ä–∏–≤–µ—Ç {user_name}! \n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤ —Ä–µ—à–µ–Ω–∏–∏ –≤–∞–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!'
                                    f'\n1. –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å'
                                    f'\n2. –û—Ä—ë–ª "–î–∞", –†–µ—à–∫–∞  "–ù–µ—Ç"'
                                    f'\n3. –ù–∞–∂–∏–º–∞–π –∫–ø–æ–Ω–∫—É "–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞—é –º–æ–Ω–µ—Ç–∫—É ü™ô"', reply_markup=markup)
    
    global counter
    counter += 1
    print(f'–ë–æ—Ç –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {counter} —Ä–∞–∑(–∞)')
    with open('statistics_monetka.txt', 'w') as statistic:
        statistic.write(str(counter))


    
@dp.message_handler(content_types=['text'])
async def answer(message: types.Message):
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    user_name = message.from_user.first_name
    logging.info(f'{user_id=} {user_full_name=} {time.asctime()}')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞—é –º–æ–Ω–µ—Ç–∫—É ü™ô')
    markup.add(item1)
    global counter

    if message.chat.type == "private":
        if message.text == '–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞—é –º–æ–Ω–µ—Ç–∫—É ü™ô':
            coin_rnd = random.choice(coin)
            await bot.send_message(message.chat.id, '–°–µ–∫—É–Ω–¥–æ—á–∫—É... ‚è±Ô∏è')
            time.sleep(1.5)
            await bot.send_message(message.chat.id, f'{coin_rnd}')
            if coin_rnd == coin[0]:
                with open('revers.webp', 'rb') as sticker:
                    await bot.send_sticker(message.chat.id, sticker)
            if coin_rnd == coin[1]:
                with open('avers.webp', 'rb') as sticker:
                    await bot.send_sticker(message.chat.id, sticker)
            time.sleep(1.5)
            await bot.send_message(message.chat.id, f'{random.choice(phrases)}')
            time.sleep(1.5)
            await bot.send_message(user_id, f'\n{user_name}! '
                                            f'\n–ó–∞–¥–∞–≤–∞–π –µ—â–µ –≤–æ–ø—Ä–æ—Å –∏ –∂–º–∏ –Ω–∞ "–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞—é –º–æ–Ω–µ—Ç–∫—É ü™ô"', reply_markup=markup)
            counter += 1
            print(f'–ë–æ—Ç –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {counter} —Ä–∞–∑(–∞)')
            with open('statistics_monetka.txt', 'w') as statistic:
                statistic.write(str(counter))
        else:
            await bot.send_message(message.chat.id, f'–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª: "{message.text}"')
            time.sleep(1)
            coin_rnd = random.choice(coin)
            await bot.send_message(message.chat.id, '–°–µ–∫—É–Ω–¥–æ—á–∫—É... ‚è±Ô∏è')
            time.sleep(1.5)
            await bot.send_message(message.chat.id, f'{coin_rnd}')
            if coin_rnd == coin[0]:
                with open('revers.webp', 'rb') as sticker:
                    await bot.send_sticker(message.chat.id, sticker)
            if coin_rnd == coin[1]:
                with open('avers.webp', 'rb') as sticker:
                    await bot.send_sticker(message.chat.id, sticker)
            time.sleep(1.5)
            await bot.send_message(message.chat.id, f'{random.choice(phrases)}')
            time.sleep(1.5)
            await bot.send_message(user_id, f'\n{user_name}! '
                                            f'\n–ó–∞–¥–∞–≤–∞–π –µ—â–µ –≤–æ–ø—Ä–æ—Å –∏ –∂–º–∏ –Ω–∞ "–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞—é –º–æ–Ω–µ—Ç–∫—É ü™ô"', reply_markup=markup)

            counter += 1
            print(f'–ë–æ—Ç –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {counter} —Ä–∞–∑(–∞)\n–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –±—ã–ª: {message.text}')
            with open('statistics_monetka.txt', 'w') as statistic:
                statistic.write(str(counter))

            
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
