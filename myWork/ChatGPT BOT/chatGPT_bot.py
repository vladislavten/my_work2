import os
import time
import openai
import conf
import check_id
from aiogram import Bot, Dispatcher, executor, types

openai.api_key = conf.GPT
TOKEN = conf.BOT
bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot)

with open('counter.txt', 'r') as f:
    counter = int(f.read())


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    await bot.send_message(user_id, f'–ü—Ä–∏–≤–µ—Ç {user_name} üëã! \n–Ø ChatGPT, –º–æ–∂–µ—à—å –º–µ–Ω—è –ø–æ–ø—Ä–æ—Å–∏—Ç—å –æ —á—ë–º —É–≥–æ–¥–Ω–æ')


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É –æ —Å–µ–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@dp.message_handler(commands=['notify'])
async def notify(message: types.Message):
    with open('ids.txt', 'r') as file:
        for line in file:
            await bot.send_message(line.strip(), f'–ü—Ä–∏–≤–µ—Ç üëã! \n–ù–µ –∑–∞–±—ã–ª –ø—Ä–æ –º–µ–Ω—è? \n–°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ, —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç—ã')


@dp.message_handler(content_types=['text'])
async def answer(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    # –ó–∞–ø–∏—Å—å ID –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    check_id.check_id(user_id)
    # –ó–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤
    with open('Requests_from_user.txt', 'a') as file:
        file.write(f'{user_id} –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}. –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text} \n')
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ id 856618521
    await bot.send_message(chat_id="856618521", text=f'User_id: '
                                                     f'{user_id} –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}. '
                                                     f'–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}')
    await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")

    # await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç Chat-GPT –æ–≥—Ä–∞–Ω–∏—á–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–∞–∫ —è —Ä–µ—à—É —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É"
    #                      " —á–∞—Ç —Å–Ω–æ–≤–∞ –Ω–∞—á–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å."
    #                      # ", –ø–ª–∞—Ç–∏—Ç—å —Å–æ —Å–≤–æ–µ–≥–æ –∫–∞—Ä–º–∞–Ω–∞ —è –Ω–º–æ–≥—É. –ï—Å–ª–∏ —ç—Ç–æ—Ç –±–æ—Ç –≤–∞–º —Ä–µ–∞–ª—å–Ω–æ –Ω—Ä–∞–≤–∏—Ç—Å—è"
    #                      # "–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ —Ä–∞–±–æ—Ç—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–∏–Ω—É—Ç—å 1 –¥–æ–ª–ª–∞—Ä –Ω–∞ –∫–∞—Ä—Ç—É –∏ –∫–∞–∫ —è –Ω–∞–±–µ—Ä—É 5 –¥–æ–ª–ª–∞—Ä–æ–≤"
    #                      # "—è –ø–µ—Ä–µ–π–¥—É –Ω–∞ –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é GPT. –ù–æ–º–µ—Ä –º–æ–µ–π –∫–∞—Ä—Ç—ã 4400430134318929")

    response = openai.Completion.create(
            model="text-davinci-003",
            prompt=message.text,
            temperature=1,
            max_tokens=2000, # –±—ã–ª–æ 1000
            # top_p=1.0,
            # frequency_penalty=0.5,
            # presence_penalty=0.0,)
    )


    await bot.send_message(user_id, response['choices'][0]['text'])

    global counter
    counter += 1
    print(f'–ë–æ—Ç –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {counter} —Ä–∞–∑(–∞)')
    with open('counter.txt', 'w') as statistic:
        statistic.write(str(counter))




# print(response['choices'][0]['text'])


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)


